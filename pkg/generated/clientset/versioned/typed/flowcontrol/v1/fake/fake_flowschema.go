

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	flowcontrolv1 "github.com/costa92/k8s-ai/pkg/generated/applyconfigurations/flowcontrol/v1"
	typedflowcontrolv1 "github.com/costa92/k8s-ai/pkg/generated/clientset/versioned/typed/flowcontrol/v1"
	v1 "k8s.io/api/flowcontrol/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeFlowSchemas implements FlowSchemaInterface
type fakeFlowSchemas struct {
	*gentype.FakeClientWithListAndApply[*v1.FlowSchema, *v1.FlowSchemaList, *flowcontrolv1.FlowSchemaApplyConfiguration]
	Fake *FakeFlowcontrolV1
}

func newFakeFlowSchemas(fake *FakeFlowcontrolV1) typedflowcontrolv1.FlowSchemaInterface {
	return &fakeFlowSchemas{
		gentype.NewFakeClientWithListAndApply[*v1.FlowSchema, *v1.FlowSchemaList, *flowcontrolv1.FlowSchemaApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("flowschemas"),
			v1.SchemeGroupVersion.WithKind("FlowSchema"),
			func() *v1.FlowSchema { return &v1.FlowSchema{} },
			func() *v1.FlowSchemaList { return &v1.FlowSchemaList{} },
			func(dst, src *v1.FlowSchemaList) { dst.ListMeta = src.ListMeta },
			func(list *v1.FlowSchemaList) []*v1.FlowSchema { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.FlowSchemaList, items []*v1.FlowSchema) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
